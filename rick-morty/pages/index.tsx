import Head from 'next/head'
import Link from 'next/link'
import styles from '@/styles/Home.module.css'
import { GetServerSideProps, NextPage } from 'next'
import Card from '../components/Card'
import Pagination from '@/components/Pagination'
import Filter from '@/components/Filter'
import {useState } from 'react'
import { useRouter } from 'next/router'
import { Character, Result,Info, ErrorTypes} from '@/types'
import Error from "next/error";

const Home:NextPage<{characters:Result[], infos:Info, error:ErrorTypes}  > = ({characters, infos, error}) => {
  const [currentCharacter, setCharacter] = useState(characters)
  const [currentInfo, setInfo] = useState(infos)
  const [query, setQuery] = useState('')
  const router = useRouter()

  const resetHandler = () => window.location.reload();

  const statusHandler = async (e:any) => {
    const url = 'https://rickandmortyapi.com/api/character/?status=' + e.target.value
    const response = await fetch(url)
    // console.log(response)
    if (response.status === 200){
      const {info, results} = await response.json()
      // console.log(results)
      setCharacter(results)
      setInfo(info) 
    }
  }
  const genderHandler = async (e:any) => {
    const url = 'https://rickandmortyapi.com/api/character/?gender=' + e.target.value
    const response = await fetch(url)
    // console.log(response)
    if (response.status === 200){
      const {info, results} = await response.json()
      // console.log(results)
      setCharacter(results)
      setInfo(info) 
    }
  }

  // const statusHandler = (e:any) => {
  //   if (router.query.gender){
  //     return router.push( '/?gender=' + String(router.query.gender) + '&status=' + e.target.value) 
  //   }
  //   router.push('/'+ '?status=' + e.target.value);}

  // const genderHandler = (e:any) => {
  //   if (router.query.status){
  //     return router.push('/?gender='+ e.target.value + '&status=' + String(router.query.status))
  //   }
  //   router.push(router.pathname + '?gender=' + e.target.value);} 


  const buttonHandler = (e:any) => {
    router.push(router.pathname + '?page=' + e.target.value);}

  const putQuery = (e:any) => {
    if (e.target.value === ''){
      router.push('/');
    }
    setQuery(e.target.value);
  }

  const searchQuery = async (e:any) => {
    if (e.key ==='Enter' || e.keyCode === 13){
      const url = 'https://rickandmortyapi.com/api/character/?name=' + e.target.value
      const response = await fetch(url)
      // console.log(response)

      if (response.status === 200){
        const {info, results} = await response.json()
        // console.log(results)
        setCharacter(results)
        setInfo(info) 
    }
    }}

  if (error){
    return <Error statusCode={error.statusCode} title={error.message} />;
  }  

  return (
    <>
      <Head>
        <title>Rick & Morty | Home Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        
        <input className={styles.searchBox} type="text" id='characterName' autoFocus enterKeyHint='done' onChange={putQuery} onKeyDown={searchQuery} placeholder='Search for characters here..........'/>
        <Filter statusHandler={statusHandler} genderHandler={genderHandler} resetHandler={resetHandler}/>

        {/* rendering card components start here */}
        <div className={styles.flexContainer}>
        {currentCharacter.map(
                (character)=>{
                  return <Link key={character.id} href={String(character.id)} ><Card
                  key={character.id}  
                  name={character.name} 
                  status={character.status}
                  species={character.species}
                  type={character.type}
                  gender={character.gender}
                  image={character.image}/></Link>
                  }
                  )}
        </div>
        {/* rendering card components end here */}
        
        <div>
          <Pagination key ='1' nextPage={currentInfo.next} prevPage={currentInfo.prev} totalPage={currentInfo.pages} buttonHandler={buttonHandler}/>
      </div>

      </main>
      
    </>
  )
}



export const getServerSideProps : GetServerSideProps = async (context) => {
  
  // console.log(Object.keys(context.query))
  // const queries = Object.keys(context.query)
  // const filters = ['gender', 'status']
  const page = context.query.page
  const url = 'https://rickandmortyapi.com/api/character/?page=' + String(page)
  
  // if (queries.some((value) => filters.includes(value))) {
  //   page = context.query.name
  //   url = 'https://rickandmortyapi.com/api/character/?name=' + String(page)
  // }
  
  const response = await fetch(url)

  if (response.status === 404) {
    // console.log('error')
    return {
      props: {
        error: {
          statusCode: response.status,
          message: response.statusText 
      }
    }
}
}
  const {results, info}:Character = await response.json()
  

  return {
    props : {
      characters : results,
      infos: info
    }
  }
}

export default Home;