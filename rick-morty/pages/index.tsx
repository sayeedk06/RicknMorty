import Head from 'next/head'
import Link from 'next/link'
import styles from '@/styles/Home.module.css'
import { GetServerSideProps, NextPage } from 'next'
import Card from '../components/Card'
import Pagination from '@/components/Pagination'
// import Filter from '@/components/Filter'
import {useState } from 'react'
import { useRouter } from 'next/router'
import { Character, Result,Info, ErrorTypes} from '@/types'
import Error from "next/error";

const Home:NextPage<{characters:Result[], infos:Info, error:ErrorTypes}  > = ({characters, infos, error}) => {
  // const [currentPage, setCurrentPage] = useState(1)
  const [query, setQuery] = useState('')
  const router = useRouter()

  const buttonHandler = (e:any) => router.push('/?page=' + e.target.value);
  const putQuery = (e:any) => {
    if (e.target.value === ''){
      router.push('/');
    }
    setQuery(e.target.value);
  }
  const searchQuery = (e:any) => {
    if (e.key ==='Enter' || e.keyCode === 13){
      router.push('/?name=' + query);
    }}

  if (error){
    return <Error statusCode={error.statusCode} title={error.message} />;
  }  

  return (
    <>
      <Head>
        <title>Rick & Morty | Home Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <Filter characters={characters}/> */}
      <main className={styles.main}>
        
        <input className={styles.searchBox} type="text" onChange={putQuery} onKeyDown={searchQuery} placeholder='Search for characters here..........'/>

        {/* rendering card components start here */}
        <div className={styles.flexContainer}>
        {characters.map(
                (character)=>{
                  return <Link key={character.id} href={String(character.id)} ><Card
                  key={character.id}  
                  name={character.name} 
                  status={character.status}
                  species={character.species}
                  type={character.type}
                  gender={character.gender}
                  image={character.image}/></Link>
                  }
                  )}
        </div>
        {/* rendering card components end here */}
        
        <div>
          <Pagination key ='1' nextPage={infos.next} prevPage={infos.prev} totalPage={infos.pages} buttonHandler={buttonHandler}/>
      </div>

      </main>
      
    </>
  )
}



export const getServerSideProps : GetServerSideProps = async (context) => {
  
  var page = context.query.page
  var url = 'https://rickandmortyapi.com/api/character/?page=' + String(page)
  
  if (context.query.name) {
    page = context.query.name
    url = 'https://rickandmortyapi.com/api/character/?name=' + String(page)
  }
  
  const response = await fetch(url)
  if (response.status === 404) {
    // console.log('error')
    return {
      props: {
        error: {
          statusCode: response.status,
          message: response.statusText 
      }
    }
}
}
  const {results, info}:Character = await response.json()
  
  // if (data.error){
  //   url = 'https://rickandmortyapi.com/api/character'
  //   const response = await fetch(url)
  //   const data = await response.json()
  //   return {
  //     props : {
  //       characters : data.results,
  //       infos: data.info
  //     }
  //   }
  // }
  

  return {
    props : {
      characters : results,
      infos: info
    }
  }
}

export default Home;